{
    "conflicts": [
        {
            "id": "cb10eb6d-e30e-4e4c-a933-483892df515e",
            "currentContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse App\\Models\\Leader;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\Checkbox;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Tables\\Columns\\CheckboxColumn;\nuse Illuminate\\Database\\Eloquent\\SoftDeletingScope;\nuse App\\Filament\\Resources\\Panel\\LeaderResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\LeaderResource\\RelationManagers;\nuse pxlrbt\\FilamentExcel\\Actions\\Tables\\ExportBulkAction;\n\nclass LeaderResource extends Resource\n{\n    protected static ?string $model = Leader::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Admin';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.leaders.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.leaders.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.leaders.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    TextInput::make('first_name')\n                        ->required()\n                        ->string()\n                        ->autofocus(),\n\n                    TextInput::make('family_name')\n                        ->required()\n                        ->string(),\n\n                    TextInput::make('phone')\n                        ->required()\n                        ->string(),\n\n                    TextInput::make('email')\n                        ->required()\n                        ->string()\n                        ->email(),\n\n                    Select::make('currency')\n                        ->required()\n                        ->string()\n                        ->searchable()\n                        ->preload()\n                        ->native(false)\n                        ->options([\n                            'USD' => 'USD',\n                            'ILS' => 'ILS',\n                            'EUR' => 'EUR',\n                        ]),\n\n                    TextInput::make('amount')\n                        ->required()\n                        ->numeric(),\n\n                    TextInput::make('number_orphans')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    Select::make('payment_method')\n                        ->required()\n                        ->string()\n                        ->searchable()\n                        ->preload()\n                        ->native(false)\n                        ->options([\n                            'online' => 'Online',\n                            'offline' => 'Offline',\n                        ]),\n\n                    Select::make('program_id')\n                        ->required()\n                        ->relationship('program', 'title')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('country')\n                        ->required()\n                        ->string()\n                        ->searchable()\n                        ->preload()\n                        ->native(false)\n                        ->options([\n                            'PS' => 'Palestine',\n                        ]),\n\n                    Checkbox::make('is_private')\n                        ->rules(['boolean'])\n                        ->nullable()\n                        ->inline(),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                TextColumn::make('first_name'),\n\n                TextColumn::make('family_name'),\n\n                TextColumn::make('phone'),\n\n                TextColumn::make('email'),\n\n                TextColumn::make('currency'),\n\n                TextColumn::make('amount'),\n\n                TextColumn::make('number_orphans'),\n\n                TextColumn::make('payment_method'),\n\n                TextColumn::make('program.title'),\n\n                TextColumn::make('country'),\n\n                CheckboxColumn::make('is_private'),\n            ])\n            ->filters([Tables\\Filters\\TrashedFilter::make()])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n\n                    Tables\\Actions\\ForceDeleteBulkAction::make(),\n                    Tables\\Actions\\RestoreBulkAction::make(),\n                    ExportBulkAction::make()\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListLeaders::route('/'),\n            'create' => Pages\\CreateLeader::route('/create'),\n            'view' => Pages\\ViewLeader::route('/{record}'),\n            'edit' => Pages\\EditLeader::route('/{record}/edit'),\n        ];\n    }\n\n    public static function getEloquentQuery(): Builder\n    {\n        return parent::getEloquentQuery()->withoutGlobalScopes([\n            SoftDeletingScope::class,\n        ]);\n    }\n}\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse App\\Models\\Leader;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\Checkbox;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Tables\\Columns\\CheckboxColumn;\nuse Illuminate\\Database\\Eloquent\\SoftDeletingScope;\nuse App\\Filament\\Resources\\Panel\\LeaderResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\LeaderResource\\RelationManagers;\n\nclass LeaderResource extends Resource\n{\n    protected static ?string $model = Leader::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Admin';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.leaders.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.leaders.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.leaders.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    Select::make('donor_type')\n                        ->rules(['boolean'])\n                        ->nullable()\n                        ->default('person')\n                        ->searchable()\n                        ->preload()\n                        ->native(false)\n                        ->options([\n                            'person' => 'Person',\n                            'company' => 'Company',\n                        ]),\n\n                    TextInput::make('first_name')\n                        ->required()\n                        ->string()\n                        ->autofocus(),\n\n                    TextInput::make('family_name')\n                        ->required()\n                        ->string(),\n\n                    TextInput::make('company_name')\n                        ->nullable()\n                        ->string(),\n\n                    TextInput::make('phone')\n                        ->required()\n                        ->string(),\n\n                    TextInput::make('email')\n                        ->required()\n                        ->string()\n                        ->email(),\n\n                    Select::make('currency')\n                        ->required()\n                        ->string()\n                        ->searchable()\n                        ->preload()\n                        ->native(false)\n                        ->options([\n                            'USD' => 'USD',\n                            'ILS' => 'ILS',\n                            'EUR' => 'EUR',\n                        ]),\n\n                    TextInput::make('amount')\n                        ->required()\n                        ->numeric()\n                        ->step(),\n\n                    TextInput::make('number_orphans')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    Select::make('payment_method')\n                        ->required()\n                        ->string()\n                        ->searchable()\n                        ->preload()\n                        ->native(false)\n                        ->options([\n                            'online' => 'Online',\n                            'offline' => 'Offline',\n                        ]),\n\n                    Select::make('program_id')\n                        ->required()\n                        ->relationship('program', 'title')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('country')\n                        ->required()\n                        ->string()\n                        ->searchable()\n                        ->preload()\n                        ->native(false)\n                        ->options([\n                            'PS' => 'Palestine',\n                        ]),\n\n                    Checkbox::make('is_private')\n                        ->rules(['boolean'])\n                        ->required()\n                        ->inline(),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                TextColumn::make('donor_type'),\n\n                TextColumn::make('first_name')\n                    ->sortable()\n                    ->searchable(),\n\n                TextColumn::make('family_name')\n                    ->sortable()\n                    ->searchable(),\n\n                TextColumn::make('company_name')\n                    ->sortable()\n                    ->searchable(),\n\n                TextColumn::make('phone')\n                    ->sortable()\n                    ->searchable(),\n\n                TextColumn::make('email'),\n\n                TextColumn::make('currency'),\n\n                TextColumn::make('amount'),\n\n                TextColumn::make('number_orphans'),\n\n                TextColumn::make('payment_method'),\n\n                TextColumn::make('program.title'),\n\n                TextColumn::make('country'),\n\n                CheckboxColumn::make('is_private'),\n            ])\n            ->filters([Tables\\Filters\\TrashedFilter::make()])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n\n                    Tables\\Actions\\ForceDeleteBulkAction::make(),\n                    Tables\\Actions\\RestoreBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListLeaders::route('/'),\n            'create' => Pages\\CreateLeader::route('/create'),\n            'view' => Pages\\ViewLeader::route('/{record}'),\n            'edit' => Pages\\EditLeader::route('/{record}/edit'),\n        ];\n    }\n\n    public static function getEloquentQuery(): Builder\n    {\n        return parent::getEloquentQuery()->withoutGlobalScopes([\n            SoftDeletingScope::class,\n        ]);\n    }\n}\n"
        }
    ]
}